Functions that can be used to modify/change anything 
different properties/methods in the class 

Used inside on classes only 

Understanding the order in which decorators are run is essential

- Decorators only run one singlr time when we define a class not when we call


"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
class Boat {
    constructor() {
        this.color = 'red';
    }
    get formattedColor() {
        return `This boat color is ${this.color}`;
    }
    //target will be "{ pilot: [Function(anonymous)]}""
    //key will be "pilot"
    pilot() {
        console.log('swish');
    }
}
__decorate([
    testDecorator,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Boat.prototype, "pilot", null);
function testDecorator(target, key) {
    console.log('Target', target);
    console.log('Key', key);
}


Notes on metadata
A little snippet of data that can be tied to a specific object eg class, property, method etc
TS can provide type information as metadata to JS